theta_ideal <- 0.75
smap <- SMap(dataFrame = df_total_aux,
lib = "1 500", pred = "1 500", E = 2,
theta = theta_ideal,
columns = "t_max t_min rh_max rh_min p_total LAMBDA",
target = "CASES",
Tp = 0,
embedded = TRUE)
smap
coeffs_tmax <- smap$coefficients$`∂CASES/∂t_max`
coeffs_tmin <- smap$coefficients$`∂CASES/∂t_min`
coeffs_rhmax <-  smap$coefficients$`∂CASES/∂rh_max`
coeffs_rhmin <-  smap$coefficients$`∂CASES/∂rh_min`
coeffs_ptotal <-  smap$coefficients$`∂CASES/∂p_total`
coeffs_lambda <-  smap$coefficients$`∂CASES/∂LAMBDA`
smap <- SMap(dataFrame = df_total_aux,
lib = "1 501", pred = "1 501", E = 2,
theta = theta_ideal,
columns = "t_max t_min rh_max rh_min p_total LAMBDA",
target = "CASES",
Tp = 0,
embedded = TRUE)
smap
coeffs_tmax <- smap$coefficients$`∂CASES/∂t_max`
coeffs_tmin <- smap$coefficients$`∂CASES/∂t_min`
coeffs_rhmax <-  smap$coefficients$`∂CASES/∂rh_max`
coeffs_rhmin <-  smap$coefficients$`∂CASES/∂rh_min`
coeffs_ptotal <-  smap$coefficients$`∂CASES/∂p_total`
coeffs_lambda <-  smap$coefficients$`∂CASES/∂LAMBDA`
# maximum temperature
a <- coeffs_tmax
b <- df_total_aux_2$t_max
c <- df_total_aux_2$EPI_WEEK
df_fin <- data.frame(int_coeff = a, t_max = b, week = df_total_aux_2$EPI_WEEK)
ggplot(df_fin, aes(x = t_max, y = int_coeff, color = week)) + geom_point() + theme_bw()  +
scale_color_viridis()
# minimum temperature
a <- coeffs_tmin
b <- df_total_aux_2$t_min
c <- df_total_aux_2$EPI_WEEK
df_fin <- data.frame(int_coeff = a, t_min = b, week = df_total_aux_2$EPI_WEEK)
ggplot(df_fin, aes(x = t_min, y = int_coeff, color = week)) + geom_point() + theme_bw()  +
scale_color_viridis()
# max relative humidity
a <- coeffs_rhmax
b <- df_total_aux_2$rh_max
c <- df_total_aux_2$EPI_WEEK
df_fin <- data.frame(int_coeff = a, rh_max = b, week = df_total_aux$EPI_WEEK)
ggplot(df_fin, aes(x = rh_max, y = int_coeff, color = week)) + geom_point() + theme_bw()  +
scale_color_viridis()
# min relative humidity
a <- coeffs_rhmin
b <- df_total_aux_2$rh_min
c <- df_total_aux_2$EPI_WEEK
df_fin <- data.frame(int_coeff = a, rh_min = b, week = df_total_aux$EPI_WEEK)
ggplot(df_fin, aes(x = rh_min, y = int_coeff, color = week)) + geom_point() + theme_bw()  +
scale_color_viridis()
# lambda
a <- coeffs_lambda
b <- df_total_aux_2$LAMBDA
c <- df_total_aux_2$EPI_WEEK
df_fin <- data.frame(int_coeff = a, lambda = b, week = df_total_aux$EPI_WEEK)
ggplot(df_fin, aes(x = lambda, y = int_coeff, color = week)) + geom_point() + theme_bw()  +
scale_color_viridis()
gc()
load('RJ/dataset_RJ.RData')
df_rj <- df_total
load('SP/dataset_SP.RData')
View(df_total)
View(df_rj)
load("C:/Users/denis/Documents/dengue-CCM-ML/RJ/climate_RJ.RData")
View(daily_single_ag)
library(nasapower)
library(sf)
library(lubridate)
library(tidyverse)
library(dplyr)
# Marco zero de Santos #####
#lat <- -23.934167
#long <- -46.328611
# Marco zero de SP #####
#lat <- 	-23.5475
#long <- 	-46.63611
# Coordenadas do RJ #####
lat <- -22.90642
long <- -43.18223
# Getting climatic information from NASA #####
# sem epi 6 de 2012 começando o dia 5 de fev 2012
# sem epi 51 de 2021 finalizando o dia 25 de dez de 2021
daily_single_ag <- get_power(
community = "ag",
lonlat = c(long, lat),
pars = c("RH2M", "T2M", "PRECTOTCORR"),
dates = c("2012-02-05", "2021-12-25"),
temporal_api = "hourly"
)
daily_single_ag <- daily_single_ag %>% group_by(YEAR, MO, DY) %>%
summarise(t_max = max(T2M),
t_min = min(T2M),
t_avg = mean(T2M),
rh_max = max(RH2M),
rh_min = min(RH2M),
rh_avg = mean(RH2M),
p_total = sum(PRECTOTCORR))
daily_single_ag <- daily_single_ag %>% ungroup()
daily_single_ag <- daily_single_ag %>%
mutate(YYYYMMDD = paste0(YEAR,'-',MO,'-',DY))
# Cleaning this and adding the epidemiological week #####
daily_single_ag <- daily_single_ag %>% mutate(EPI_WEEK = epiweek(YYYYMMDD),
EPI_YEAR = epiyear(YYYYMMDD))
daily_single_ag <- daily_single_ag %>% select(c(EPI_WEEK,EPI_YEAR, rh_max, rh_min, rh_avg,
t_max, t_min, t_avg, p_total))
# Calculating weekly avg, max, min, etc of climatic variables ######
daily_single_ag <- daily_single_ag %>% group_by(EPI_WEEK, EPI_YEAR) %>% summarise(
t_max = mean(t_max),
t_min = mean(t_min),
t_avg = mean(t_avg),
rh_max = mean(rh_max),
rh_min = mean(rh_min),
rh_avg = mean(rh_avg),
p_total = sum(p_total)
)
daily_single_ag <- daily_single_ag %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
daily_single_ag <- daily_single_ag %>% arrange(tplot)
View(daily_single_ag)
View(daily_single_ag)
library(sf)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(zoo)
# Defining lambda function ########
lambda <- function(x){
y <- lead(x, 1)
x <- x[1:(length(x)-1)]
y <- y[!(is.na(y))]
coeflm <- as.numeric(lm(y ~ x)$coefficients[2])
return(coeflm)
}
# Loading data from Santos ######
df_santos <- read_csv2("RJ/330455_total_new.csv")
View(df_santos)
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Creating lagged data of cummulated cases #############
ws1 <- 12
ws2 <- 16
df_santos['LAMBDA'] <- rollapply(df_santos['CASES'], width = ws1, FUN = function(w) lambda(w), align = "right", by.column = FALSE, fill = NA)
df_santos['LAMBDA_2'] <- rollapply(df_santos['CASES'], width = ws2, FUN = function(w) lambda(w), align = "right", by.column = FALSE, fill = NA)
# Filtrating the weeks of interest #########
df_santos <- df_santos %>% filter(tplot >= (2012 + (6/52))) %>%
filter(tplot <= (2021 + (51/52)))
View(df_santos)
gc()
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('SP/dataset_SP.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 16),
EPI_WEEK = lead(EPI_WEEK, 16),
EPI_YEAR = lead(EPI_YEAR, 16),
tplot = lead(tplot, 16),
rh_max = lead(rh_max, 15),
rh_min = lead(rh_min, 15),
t_min = lead(t_min, 6),
LAMBDA = lead(LAMBDA, 16))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
N_MOSQ_ARM_lag, t_min_lag, t_max_lag, LAMBDA_lag)
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag)
# Calculating with size of the population ################################
pop <- read.csv2('SP/pop_SP.csv')
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("SP/355030_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2021)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('SP/pop_SP.csv')
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = EPI_YEAR, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 20)
summary(dengue.memmodel)
plot(dengue.memmodel)
# Plotting the whole thing ####################################################
thr_preepi <- 5.2
thr_medium <- 1.0
thr_high <- 16.5
thr_vhigh <- 687.83
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2019-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2019-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("RJ/330455_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2021)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('RJ/pop_RJ.csv')
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = EPI_YEAR, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 20)
summary(dengue.memmodel)
plot(dengue.memmodel)
# Plotting the whole thing ####################################################
thr_preepi <- 5.2
thr_medium <- 1.0
thr_high <- 16.5
thr_vhigh <- 687.83
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2019-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2019-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("RJ/330455_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2021)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('RJ/pop_RJ.csv')
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = EPI_YEAR, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 20)
summary(dengue.memmodel)
plot(dengue.memmodel)
# Plotting the whole thing ####################################################
thr_preepi <- 5.2
thr_medium <- 1.0
thr_high <- 16.5
thr_vhigh <- 687.83
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2019-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2019-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('SP/dataset_SP.RData')
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 16),
EPI_WEEK = lead(EPI_WEEK, 16),
EPI_YEAR = lead(EPI_YEAR, 16),
tplot = lead(tplot, 16),
rh_max = lead(rh_max, 15),
rh_min = lead(rh_min, 15),
t_min = lead(t_min, 6),
LAMBDA = lead(LAMBDA, 16))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag)
# Calculating with size of the population ################################
pop <- read.csv2('SP/pop_SP.csv')
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
# Calculating with the epidemic thresholds #################################
thr_pre <- 5.2
thr_high <- 16.15
df_total_aux <- df_total_aux %>% mutate(label =
case_when(CASES_100K <= thr_pre ~ 'Pre',
CASES_100K > thr_pre & CASES_100K <= thr_high ~ 'Epi',
CASES_100K > thr_high ~ 'High')
)
# Saving dataset for ML ##################################################
save(df_total_aux, file = 'SP/dataset_ML_SP.RData')
write_csv(df_total_aux, 'SP/dataset_ML_SP.csv')
gc()
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('SP/dataset_SP.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 16),
EPI_WEEK = lead(EPI_WEEK, 16),
EPI_YEAR = lead(EPI_YEAR, 16),
tplot = lead(tplot, 16),
rh_max = lead(rh_max, 15),
rh_min = lead(rh_min, 15),
t_min = lead(t_min, 6),
LAMBDA = lead(LAMBDA, 16))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag)
# Calculating with size of the population ################################
pop <- read.csv2('SP/pop_SP.csv')
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
# Calculating with the epidemic thresholds #################################
thr_pre <- 5.2
thr_high <- 16.15
df_total_aux <- df_total_aux %>% mutate(label =
case_when(CASES_100K <= thr_pre ~ 'Pre',
CASES_100K > thr_pre & CASES_100K <= thr_high ~ 'Epi',
CASES_100K > thr_high ~ 'High')
)
# Saving dataset for ML ##################################################
save(df_total_aux, file = 'SP/dataset_ML_SP.RData')
write_csv(df_total_aux, 'SP/dataset_ML_SP.csv')
gc()
