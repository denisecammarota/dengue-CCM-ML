for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2023)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('SP/pop_SP.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 12396372)
pop <- pop %>% add_row(Ano = 2023, Pop_residente = 12396372)
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% mutate(season = ifelse(EPI_WEEK <= 40, EPI_YEAR, EPI_YEAR - 1))
#df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(season, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = season, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 30, i.method = 1)
summary(dengue.memmodel)
plot(dengue.memmodel)
# Plotting the whole thing ####################################################
#thr_preepi <- 5.11
#thr_medium <- 1.00
#thr_high <- 16.60
#thr_vhigh <- 57.54
thr_preepi <- 1.93
thr_medium <- 1.04
thr_high <- 19.02
thr_vhigh <- 68.69
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2023-0.2, y = thr_preepi, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2023-0.2, y = thr_high, label="High", size = 3, color = 'blue')
gc()
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('RJ/dataset_RJ.RData')
View(df_total)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("RJ/330455_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2022)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('RJ/pop_RJ.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 6775561)
pop <- pop %>% add_row(Ano = 2023, Pop_residente = 6775561)
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% mutate(season = ifelse(EPI_WEEK <= 40, EPI_YEAR, EPI_YEAR - 1))
#df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(season, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = season, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 30, i.method = 1)
summary(dengue.memmodel)
plot(dengue.memmodel)
thr_preepi <- 5.23
thr_medium <- 3.92
thr_high <- 60.33
thr_vhigh <- 201.96
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2019-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2019-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("SP/355030_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2022)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('SP/pop_SP.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 12396372)
pop <- pop %>% add_row(Ano = 2023, Pop_residente = 12396372)
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
View(df_santos_serie)
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% mutate(season = ifelse(EPI_WEEK <= 40, EPI_YEAR, EPI_YEAR - 1))
#df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(season, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = season, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 30, i.method = 1)
summary(dengue.memmodel)
plot(dengue.memmodel)
thr_preepi <- 1.94
thr_medium <- 0.97
thr_high <- 18.11
thr_vhigh <- 66.00
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2023-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2023-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data from Santos ################################
df_santos <- read_csv2("RJ/330455_total_new.csv")
df_santos <- df_santos %>% mutate(EPI_WEEK = as.numeric(WEEK_PRI),
EPI_YEAR = as.numeric(YEAR_PRI)) %>%
select(EPI_WEEK, EPI_YEAR, CASES)
df_santos <- df_santos %>% mutate(tplot = EPI_YEAR + (EPI_WEEK/52))
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, tplot, CASES)
df_santos <- df_santos %>% arrange(tplot)
df_santos
# Plotting the whole series ##############################
ggplot(df_santos, aes(x = tplot, y = CASES)) + geom_line() + geom_point()
# Plotting all seasons ######################################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES))
}
# Plotting while normalizing ###############################
p <- ggplot()
for(year in unique(df_santos$EPI_YEAR)){
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES/norm_fact))
}
p
# Plotting year by year ####################################
for(year in unique(df_santos$EPI_YEAR)){
p <- ggplot()
df_aux <- df_santos %>% filter(EPI_YEAR == year)
norm_fact <- max(df_aux)
p <- p + geom_point(data = df_aux, aes(x = EPI_WEEK, y = CASES)) +
geom_line(data = df_aux, aes(x = EPI_WEEK, y = CASES)) + ggtitle(year)
print(p)
}
# Filtering some years only ###################################
df_santos <- df_santos %>% filter(EPI_YEAR >= 2001) %>% filter(EPI_YEAR <= 2022)
df_santos <- df_santos %>% select(EPI_YEAR, EPI_WEEK, CASES)
# Calculating weekly rate of cases per 100k inhabitants ############################
pop <- read.csv2('RJ/pop_RJ.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 6775561)
pop <- pop %>% add_row(Ano = 2023, Pop_residente = 6775561)
df_santos <- df_santos %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_santos['CASES_100K'] <- (df_santos['CASES']/df_santos['Pop_residente'])*(10**5)
df_santos_serie <- df_santos
# Putting this into form for memmodel #########################################
df_santos <- df_santos %>% mutate(season = ifelse(EPI_WEEK <= 40, EPI_YEAR, EPI_YEAR - 1))
#df_santos <- df_santos %>% filter(EPI_WEEK <= 40)
df_santos <- df_santos %>% select(season, EPI_WEEK, CASES_100K)
df_santos <- df_santos %>% pivot_wider(names_from = season, values_from = CASES_100K)
df_santos[is.na(df_santos)] <- 0
rm(df_aux,p,pop)
df_santos <- df_santos %>% select(!c(EPI_WEEK))
# Passing this through the memmodel ##########################################
dengue.memmodel <- memmodel(df_santos, i.season = 30, i.method = 1)
summary(dengue.memmodel)
plot(dengue.memmodel)
# Plotting the whole thing ####################################################
#thr_preepi <- 5.11
#thr_medium <- 1.00
#thr_high <- 16.60
#thr_vhigh <- 57.54
thr_preepi <- 5.23
thr_medium <- 3.92
thr_high <- 60.33
thr_vhigh <- 201.96
df_santos_serie <- df_santos_serie %>% mutate(tplot = EPI_YEAR + EPI_WEEK/52)
ggplot(df_santos_serie, aes(x = tplot, y = CASES_100K)) + geom_line() +
geom_point() + geom_hline(yintercept = thr_preepi, color = 'red') +
geom_hline(yintercept = thr_high, color = 'blue') +
theme_bw() +
xlab('Year') +
ylab('Cases per 100.000 inhabitants') +
annotate("text", x = 2019-0.2, y = thr_preepi + 10, label="Pre-Epidemic", size = 3, color = 'red') +
annotate("text", x = 2019-0.2, y = thr_high + 10, label="High", size = 3, color = 'blue')
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('RJ/dataset_RJ.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 15),
EPI_WEEK = lead(EPI_WEEK, 15),
EPI_YEAR = lead(EPI_YEAR, 15),
tplot = lead(tplot, 15),
rh_max = lead(rh_max, 1),
rh_min = lead(rh_min, 3),
t_min = lead(t_min, 6),
t_max = lead(t_max, 5),
LAMBDA = lead(LAMBDA, 15))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA,
p_total_lag = p_total) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag, p_total_lag)
# Calculating with size of the population ################################
pop <- read.csv2('RJ/pop_RJ.csv')
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
# Calculating with the epidemic thresholds #################################
thr_pre <- 5.23
thr_high <- 60.33
df_total_aux <- df_total_aux %>% mutate(label =
case_when(CASES_100K <= thr_pre ~ 'Pre',
CASES_100K > thr_pre & CASES_100K <= thr_high ~ 'Epi',
CASES_100K > thr_high ~ 'High')
)
# Saving dataset for ML ##################################################
save(df_total_aux, file = 'RJ/dataset_ML_RJ.RData')
write_csv(df_total_aux, 'RJ/dataset_ML_RJ.csv')
View(df_total_aux)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('RJ/dataset_RJ.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 15),
EPI_WEEK = lead(EPI_WEEK, 15),
EPI_YEAR = lead(EPI_YEAR, 15),
tplot = lead(tplot, 15),
rh_max = lead(rh_max, 1),
rh_min = lead(rh_min, 3),
t_min = lead(t_min, 6),
t_max = lead(t_max, 5),
LAMBDA = lead(LAMBDA, 15))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA,
p_total_lag = p_total) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag, p_total_lag)
# Calculating with size of the population ################################
pop <- read.csv2('RJ/pop_RJ.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = )
View(pop)
gc()
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('RJ/dataset_RJ.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 15),
EPI_WEEK = lead(EPI_WEEK, 15),
EPI_YEAR = lead(EPI_YEAR, 15),
tplot = lead(tplot, 15),
rh_max = lead(rh_max, 1),
rh_min = lead(rh_min, 3),
t_min = lead(t_min, 6),
t_max = lead(t_max, 5),
LAMBDA = lead(LAMBDA, 15))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
LAMBDA_lag = LAMBDA,
p_total_lag = p_total) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, LAMBDA_lag, p_total_lag)
# Calculating with size of the population ################################
pop <- read.csv2('RJ/pop_RJ.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 6775561)
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
# Calculating with the epidemic thresholds #################################
thr_pre <- 5.23
thr_high <- 60.33
df_total_aux <- df_total_aux %>% mutate(label =
case_when(CASES_100K <= thr_pre ~ 'Pre',
CASES_100K > thr_pre & CASES_100K <= thr_high ~ 'Epi',
CASES_100K > thr_high ~ 'High')
)
# Saving dataset for ML ##################################################
save(df_total_aux, file = 'RJ/dataset_ML_RJ.RData')
write_csv(df_total_aux, 'RJ/dataset_ML_RJ.csv')
View(df_total_aux)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('SP/dataset_SP.RData')
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 19),
EPI_WEEK = lead(EPI_WEEK, 19),
EPI_YEAR = lead(EPI_YEAR, 19),
tplot = lead(tplot, 19),
t_max = lead(t_max, 7),
t_min = lead(t_min, 2),
rh_max = lead(rh_max, 10),
rh_min = lead(rh_min, 0),
p_total = lead(p_total, 19),
LAMBDA = lead(LAMBDA, 19))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
p_total_lag = p_total,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, p_total_lag, LAMBDA_lag)
# Calculating with size of the population ################################
pop <- read.csv2('SP/pop_SP.csv')
View(pop)
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 12396372)
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(mem)
# Loading data ##############################################
load('SP/dataset_SP.RData')
# Using CCM results ##############################################
df_total_aux <- df_total
df_total_aux <- df_total_aux %>% ungroup() %>% mutate(CASES = lead(CASES, 19),
EPI_WEEK = lead(EPI_WEEK, 19),
EPI_YEAR = lead(EPI_YEAR, 19),
tplot = lead(tplot, 19),
t_max = lead(t_max, 7),
t_min = lead(t_min, 2),
rh_max = lead(rh_max, 10),
rh_min = lead(rh_min, 0),
p_total = lead(p_total, 19),
LAMBDA = lead(LAMBDA, 19))
df_total_aux <- df_total_aux %>%
mutate(rh_max_lag = rh_max,
rh_min_lag = rh_min,
t_min_lag = t_min,
t_max_lag = t_max,
p_total_lag = p_total,
LAMBDA_lag = LAMBDA) %>%
select(EPI_YEAR, EPI_WEEK, tplot, CASES, rh_max_lag, rh_min_lag,
t_min_lag, t_max_lag, p_total_lag, LAMBDA_lag)
# Calculating with size of the population ################################
pop <- read.csv2('SP/pop_SP.csv')
pop <- pop %>% add_row(Ano = 2022, Pop_residente = 12396372)
df_total_aux <- df_total_aux %>% left_join(pop, by = join_by(EPI_YEAR == Ano))
df_total_aux <- df_total_aux %>% mutate(CASES_100K = (CASES/Pop_residente)*(10**5))
df_total_aux <- df_total_aux %>% select(!Pop_residente)
df_total_aux <- df_total_aux %>% select(!CASES)
df_total_aux <- df_total_aux %>% drop_na()
rm(pop, df_total)
# Calculating with the epidemic thresholds #################################
thr_pre <- 1.94
thr_high <- 18.11
df_total_aux <- df_total_aux %>% mutate(label =
case_when(CASES_100K <= thr_pre ~ 'Pre',
CASES_100K > thr_pre & CASES_100K <= thr_high ~ 'Epi',
CASES_100K > thr_high ~ 'High')
)
# Saving dataset for ML ##################################################
save(df_total_aux, file = 'SP/dataset_ML_SP.RData')
write_csv(df_total_aux, 'SP/dataset_ML_SP.csv')
View(df_total_aux)
